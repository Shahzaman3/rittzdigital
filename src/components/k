"use client";
import ScrambledText from "@/animations/ScrambledText";
import SplashCursor from "@/animations/SplashCursor";
import Brand from "@/animations/Brand";
import React, { Component } from "react";

export default class Hero extends Component {
  render() {
    return (
      <>
        {/* ✅ Hero Section */}
        <section className="relative flex overflow-hidden w-full h-screen font-sans bg-pink-700 text-black">
          <SplashCursor />
          <div className="w-full h-full flex items-center justify-start px-10">
            <ScrambledText
              className="scrambled-text-demo"
              radius={70}
              duration={2}
              speed={0.5}
              scrambleChars=""
            >
              <span className="text-5xl leading-14">
                <span className="font-bold text-6xl">W</span>e Build Products
                <br />
                That <span className="font-bold">Scale —</span>
                <br />
                <span className="font-bold">No Code Required.</span>
              </span>
            </ScrambledText>
          </div>

          {/* ✅ Hero Background Cubes */}
          <div className="absolute bottom-10 -right-25 w-[200px] h-[200px] rotate-[45deg] bg-green-700 shadow-xl rounded-xl"></div>
          <div className="absolute top-36 -right-25 w-[200px] h-[200px] rotate-[45deg] bg-red-700  shadow-lg order-[4px] rounded-xl border-white"></div>
          <div className="absolute top-71 right-15 w-[200px] h-[200px] rotate-[45deg] bg-yellow-500 shadow-lg rounded-xl "></div>
        </section>

        {/* ✅ Brand Scroll Cube Section */}
        <section className="w-full h-[120vh] bg-gray-200 overflow-x-hidden">
          <Brand />
        </section>
      </>
    );
  }
}



"use client";
import React, { useEffect, useRef } from "react";
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

export default function Brand() {
  const cubeRef = useRef(null);
  const textRef = useRef(null);


  useEffect(() => {
    const cube = cubeRef.current;
    const text = textRef.current;

    // Initial setup
    gsap.set(text, { opacity: 0, x: -100 });
    gsap.set(cube, { scale: 2, y: 50 });

    // Zoom timeline with text reveal after zoom completes
    const zoomTl = gsap.timeline({
      scrollTrigger: {
        trigger: cube,
        start: "top 90%",
        end: "top 10%",
        scrub: true,
      },
    });

    zoomTl
      .to(cube, {
        scale: 1,
        y: 0,
        ease: "power2.out",
      })
      .to(
        text,
        {
          opacity: 1,
          x:0,
          ease: "power2.out",
          duration: 0.5,
        },
        ">+0.1"
      );

    // Rotation timeline - smooth y movement with easing
    const rotateTl = gsap.timeline({
      scrollTrigger: {
        trigger: cube,
        start: "top 3%",
        end: "bottom 105%",
        scrub: 2,
        //markers: true,
      },
    });

    rotateTl.to(cube, {
      rotateX: -90,
      y: 110,
      ease: "power2.inOut",
      duration: 1,
    });

    return () => {
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill());
    };
  }, []);

  return (
    <div
      style={{ perspective: "1400px" }}
      className="flex justify-center items-center h-[120vh] overflow-x-hidden bg-gray-200 z-0"
    >
      <div
        ref={cubeRef}
        className="relative w-[74rem] h-[30rem] mb-[10rem] rounded-[40px] transform-style-preserve-3d"
        style={{
          transformStyle: "preserve-3d" /* No transformOrigin explicitly set */,
        }}
      >
        {/* Front Face */}
        <div
          className="absolute w-full h-full rounded-[40px] bg-amber-500 p-20 flex items-center justify-between text-white"
          style={{ transform: "translateZ(244px)" }}
        >
          <div ref={textRef}>
            <p className="text-[28px] font-semibold text-gray-800">
              Behind The Brand
            </p>
            <h2 className="text-[40px] font-semibold leading-snug">
              We are not afraid. we are
              <br />
              your partners.
              <br />
              we build unique with you.
            </h2>
          </div>
         <div className="bg-white rounded-md  relative  w-50 h-50 " >
          <img src="/assets/Rectangle 4206.png" alt="Brand Graphic" className=" absolute  top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2" />
          <img src="/assets/Rectangle 4207.png" alt="Brand Graphic" className="absolute bottom-12 right-15 " />
          <img src="/assets/Ellipse 60.png" alt="Brand Graphic" className="absolute bottom-14 right-10" />
          <img src="/assets/Polygon 1.png" alt="Brand Graphic" className="absolute top-14 left-12" />
        </div>
        </div>

        {/* Bottom Face */}
        <div
          className="absolute w-full h-full rounded-[40px] bg-[#fff6db] p-20 flex items-center justify-between text-black overflow-x-hidden"
          style={{
            transform: "rotateX(90deg) translateZ(244px)",
            backfaceVisibility: "hidden",
          }}
        >
          <div >
            <p className="text-[28px] font-semibold text-gray-800">
              Behind The Brand
            </p>
            <p className="text-[40px] font-semibold">
              we{" "}
              <span className="text-yellow-500 font-semibold">
                blend design
              </span>
              , tech, and creativity
              <br />
              to build{" "}
              <span className="text-yellow-500 font-semibold">
                products
              </span>{" "}
              that put
              <br />
              customers first.
            </p>
          </div>
          <div className="border border-yellow-500 rounded-md relative  w-50 h-50 p-2" >
          <img src="/assets/Rectangle 4206.png" alt="Brand Graphic" className=" absolute  top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2   rotate-[60deg]" />
          <img src="/assets/Rectangle 4207.png" alt="Brand Graphic" className="absolute bottom-12 right-15 " />
          <img src="/assets/Ellipse 60.png" alt="Brand Graphic" className="absolute bottom-8 right-18" />
          <img src="/assets/Polygon 1.png" alt="Brand Graphic" className="absolute top-10 left-18.5" />
          </div>

        </div>
      </div>
    </div>
  );
}






























import React, {
  Children,
  cloneElement,
  forwardRef,
  isValidElement,
  useEffect,
  useMemo,
  useRef,
} from "react";
import gsap from "gsap";

export const Card = forwardRef(
  ({ customClass, children, ...rest }, ref) => (
    <div
      ref={ref}
      {...rest}
      className={`absolute top-1/2 left-1/2 rounded-xl  bg-orange-500 text-white [transform-style:preserve-3d] [will-change:transform] [backface-visibility:hidden] ${customClass ?? ""} ${rest.className ?? ""}`.trim()}
    >
      {children}
    </div>
  )
);
Card.displayName = "Card";

const makeSlot = (
  i,
  distX,
  distY,
  total
) => ({
  x: i * distX,
  y: -i * distY,
  z: -i * distX * 1.5,
  zIndex: total - i,
});

const placeNow = (el, slot, skew) =>
  gsap.set(el, {
    x: slot.x,
    y: slot.y,
    z: slot.z,
    xPercent: -50,
    yPercent: -50,
    skewY: skew,
    transformOrigin: "center center",
    zIndex: slot.zIndex,
    force3D: true,
  });

const CardSwap = ({
  width = 500,
  height = 400,
  cardDistance = 60,
  verticalDistance = 70,
  delay = 5000,
  pauseOnHover = false,
  onCardClick,
  skewAmount = 6,
  easing = "elastic",
  children,
}) => {
  const config =
    easing === "elastic"
      ? {
        ease: "elastic.out(0.6,0.9)",
        durDrop: 2,
        durMove: 2,
        durReturn: 2,
        promoteOverlap: 0.9,
        returnDelay: 0.05,
      }
      : {
        ease: "power1.inOut",
        durDrop: 0.8,
        durMove: 0.8,
        durReturn: 0.8,
        promoteOverlap: 0.45,
        returnDelay: 0.2,
      };

  const childArr = useMemo(
    () => Children.toArray(children),
    [children]
  );
  const refs = useMemo(
    () => childArr.map(() => React.createRef()),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [childArr.length]
  );

  const order = useRef(
    Array.from({ length: childArr.length }, (_, i) => i)
  );

  const tlRef = useRef(null);
  const intervalRef = useRef();
  const container = useRef(null);

  useEffect(() => {
    const total = refs.length;
    refs.forEach((r, i) =>
      placeNow(
        r.current,
        makeSlot(i, cardDistance, verticalDistance, total),
        skewAmount
      )
    );

    const swap = () => {
      if (order.current.length < 2) return;

      const [front, ...rest] = order.current;
      const elFront = refs[front].current;
      const tl = gsap.timeline();
      tlRef.current = tl;

      tl.to(elFront, {
        y: "+=500",
        duration: config.durDrop,
        ease: config.ease,
      });

      tl.addLabel("promote", `-=${config.durDrop * config.promoteOverlap}`);
      rest.forEach((idx, i) => {
        const el = refs[idx].current;
        const slot = makeSlot(i, cardDistance, verticalDistance, refs.length);
        tl.set(el, { zIndex: slot.zIndex }, "promote");
        tl.to(
          el,
          {
            x: slot.x,
            y: slot.y,
            z: slot.z,
            duration: config.durMove,
            ease: config.ease,
          },
          `promote+=${i * 0.15}`
        );
      });

      const backSlot = makeSlot(
        refs.length - 1,
        cardDistance,
        verticalDistance,
        refs.length
      );
      tl.addLabel("return", `promote+=${config.durMove * config.returnDelay}`);
      tl.call(
        () => {
          gsap.set(elFront, { zIndex: backSlot.zIndex });
        },
        undefined,
        "return"
      );
      tl.set(elFront, { x: backSlot.x, z: backSlot.z }, "return");
      tl.to(
        elFront,
        {
          y: backSlot.y,
          duration: config.durReturn,
          ease: config.ease,
        },
        "return"
      );

      tl.call(() => {
        order.current = [...rest, front];
      });
    };

    swap();
    intervalRef.current = window.setInterval(swap, delay);

    if (pauseOnHover) {
      const node = container.current;
      const pause = () => {
        tlRef.current?.pause();
        clearInterval(intervalRef.current);
      };
      const resume = () => {
        tlRef.current?.play();
        intervalRef.current = window.setInterval(swap, delay);
      };
      node.addEventListener("mouseenter", pause);
      node.addEventListener("mouseleave", resume);
      return () => {
        node.removeEventListener("mouseenter", pause);
        node.removeEventListener("mouseleave", resume);
        clearInterval(intervalRef.current);
      };
    }
    return () => clearInterval(intervalRef.current);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [cardDistance, verticalDistance, delay, pauseOnHover, skewAmount, easing]);

  const rendered = childArr.map((child, i) =>
    isValidElement(child)
      ? cloneElement(child, {
        key: i,
        ref: refs[i],
        style: { width, height, ...(child.props.style ?? {}) },
        onClick: (e) => {
          child.props.onClick?.(e);
          onCardClick?.(i);
        },
      }) : child
  );

  return (
    <div
      ref={container}
      className="absolute bottom-0 right-0 transform translate-x-[5%] translate-y-[20%] origin-bottom-right perspective-[900px] overflow-visible max-[768px]:translate-x-[25%] max-[768px]:translate-y-[25%] max-[768px]:scale-[0.75] max-[480px]:translate-x-[25%] max-[480px]:translate-y-[25%] max-[480px]:scale-[0.55]"
      style={{ width, height }}
    >
      {rendered}
    </div>
  );
};

export default CardSwap;



























"use client";
import ScrambledText from "@/animations/ScrambledText";
import SplashCursor from "@/animations/SplashCursor";
import React, { Component } from "react";
import CardSwap, { Card } from '@/animations/CardSwap'

export default class Hero extends Component {
  render() {
    return (
      <div className="relative flex overflow-hidden">
        <SplashCursor />
        <div className="w-full h-screen font-sans overflow-hidden bg-pink-700 text-black">
          <ScrambledText
            className="scrambled-text-demo py-30 px-6"
            radius={70}
            duration={2}
            speed={0.5}
            scrambleChars=""
          >
            <span className="text-5xl leading-14">
              <span className="font-bold text-6xl">W</span>e Build Products
              <br />
              That <span className="font-bold">Scale —</span>
              <br />
              <span className="font-bold">No Code Required.</span>
            </span>
          </ScrambledText>
        </div>
        <div style={{ height: "600px", position: "relative" }}>
          <CardSwap
            cardDistance={60}
            verticalDistance={70}
            delay={5000}
            pauseOnHover={false}
          >
            <Card>
              <h3>Card 1</h3>
              <p>Your content here</p>
            </Card>
            <Card>
              <h3>Card 2</h3>
              <p>Your content here</p>
            </Card>
            <Card>
              <h3>Card 3</h3>
              <p>Your content here</p>
            </Card>
          </CardSwap>
        </div>
      </div>
    );
  }
}